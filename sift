#!/usr/bin/env python

import sys
import re
import string
import copy
import os

# HOW TO SIFT DIFFS APART USING TAGS

# There are three kinds of <tag1[,tag2]> target markers.  Examples:
#
# 1. File scope.  All hunks within the file go to the tag destination(s).
#
#    <foo>--- filea
#    --- fileb
#    @@ +0,0 +1 @@
#    This entire file
#    @@ +0,0 +1 @@
#    goes to the 'foo' destination.
#
# 2. Hunk scope.  The given hunk goes to the tag destination(s).
#
#    --- filea
#    --- fileb
#    <foo>@@ +0,0 +1 @@
#    This hunk goes to the 'foo' destination.
#    @@ +0,0 +1 @@
#    But this one is not sifted at all.
#
# 3. Line scope.  The given hunk is copied to the destination, with that line
#    preserved in the destination, removed in the source.
#
#    --- filea
#    --- fileb
#    @@ +0,0 +3 @@
#    This line appears in both foo and stdout.
#    <foo>This line will appear in 'foo', but not on stdout.
#    This and subsequent lines appear in both foo and stdout.
#    Note that the number in the hunk header will be adjusted
#    accordingly for both outputs.
#    @@ +0,0 +1 @@
#    This one is not sifted at all.
#
# 4. NOT YET IMPLEMENTED: A marked block within a hunk, of the form
#    <tag1></tag2>.  In this case, the hunk is copied to the destination, with
#    all other tags
#
#    --- filea
#    --- fileb
#    @@ +0,0 +3 @@
#    This line appears in both foo and stdout.
#    This line will appear <foo>in 'foo'</foo>, but on stdout
#    the "in 'foo'" string will not be present.
#    @@ +0,0 +1 @@
#    This one is not sifted at all.

fd = open(sys.argv[1])

targets = {}

line = fd.readline()
if line == '<%\n':
    while line and line != '%>\n':
        match = re.match('([^=]+)=(.+)', line)
        if match:
            path = match.group(2)
            targets[match.group(1)] = path
            if os.path.exists(path):
                os.unlink(path)
        line = fd.readline()
    if line:
        assert line == '%>\n'
        line = fd.readline()

last_from_to = {}

class DiffHunk:
    tag       = None
    from_file = None
    to_file   = None
    addr      = None
    lines     = []

    def __init__(self):
        self.lines = []

    def write(self, fd, path=None, print_body = True):
        if not path or path not in last_from_to or \
           last_from_to[path] != (self.from_file, self.to_file):
           fd.write('--- %s\n' % self.from_file)
           fd.write('+++ %s\n' % self.to_file)

           last_from_to[path] = (self.from_file, self.to_file)

        lstart, llen, rstart, rlen, descr = self.addr

        nllen = nrlen = 0
        for line in self.lines:
            if len(line) == 0:
                print 'from_file =', self.from_file
                print 'to_file   =', self.to_file
                print '@@ -%d,%d +%d @@%s\n' % \
                    (lstart, nllen, rstart, descr)
                assert False

            if line[0] == ' ':
                nllen += 1
                nrlen += 1
            elif line[0] == '-':
                nllen += 1
            elif line[0] == '+':
                nrlen += 1
            else:
                print 'Illegal leading char (%s): %s' % (line[0], line)
                assert False

        if nrlen or not rstart:
            fd.write('@@ -%d,%d +%d,%d @@%s\n' %
                     (lstart, nllen, rstart, nrlen, descr))
        else:
            fd.write('@@ -%d,%d +%d @@%s\n' %
                     (lstart, nllen, rstart, descr))

        if print_body:
            for line in self.lines:
                fd.write(line)
                fd.write('\n')

    def dispatch(self):
        if not self.tag:
            added = 0
            for line in self.lines:
                if line[0] == '+':
                    added += 1
            if added > 0:
                #print "WRITE TO STDOUT:"
                self.write(sys.stdout)
        else:
            if self.tag == '<DELETE>':
                pass
                #print "DELETED"
                #self.write(sys.stdout, False)
            else:
                if self.tag in targets:
                    path = targets[self.tag]
                else:
                    path = self.tag

                #print "WRITE TO '%s':" % self.tag
                #self.write(sys.stdout)

                with open(path, 'a') as out:
                    self.write(out, path)

from_file = None
to_file   = None
file_tags = []
tags      = []
hunks     = {}

for line in fd:
    if re.match('[a-z]', line): continue

    match = re.match('<([^>]*)>(.*\n)', line)
    if match:
        if not len(match.group(1)):
            tags = ['<DELETE>']
        else:
            tags = string.split(match.group(1), ',')
        line = match.group(2)
        if not line.strip():
            continue

    match = re.match('(---|\+\+\+) (.+)', line)
    if match:
        map(lambda x: x.dispatch(), hunks.values())
        hunks = {}

        if match.group(1) == '---':
            file_tags = tags
            tags      = []
            from_file = match.group(2)
        else:
            to_file   = match.group(2)
    else:
        match = re.match('@@ -(\d+),(\d+) \+(\d+)(,(\d+))? @@(.*)', line)
        if match:
            map(lambda x: x.dispatch(), hunks.values())
            hunks = {}

            hunk = DiffHunk()
            hunk.from_file = from_file
            hunk.to_file   = to_file

            hunk.addr = [ int(match.group(1))
                        , int(match.group(2))
                        , int(match.group(3))
                        , match.group(5) and int(match.group(5))
                        , match.group(6) ]

            #print "file tags", file_tags
            #print "hunk tags", tags
            all_tags = file_tags + tags
            tags     = []
            if all_tags:
                for tag in all_tags:
                    hunks[tag] = copy.deepcopy(hunk)
                    hunks[tag].tag = tag
            else:
                hunks[None] = hunk

        else:
            if not hunk:
                sys.stderr.write("Unexpected: %s\n" % line)
                sys.exit(1)
            else:
                if tags:
                    #print "line tags", tags
                    for tag in tags:
                        if tag not in hunks:
                            hunks[tag] = copy.deepcopy(hunks.values()[0])
                            hunks[tag].tag = tag
                        hunk = hunks[tag]
                        hunk.lines.append(line[:-1])

                    if False:   # this is disabled; it should be an option
                        # Use of more than one line tag implies no output to
                        # stdout
                        if len(hunks) > 2 and None in hunks:
                            del hunks[None]
                else:
                    for hunk in hunks.values():
                        hunk.lines.append(line[:-1])

                tags = []

map(lambda x: x.dispatch(), hunks.values())

sys.exit(0)
